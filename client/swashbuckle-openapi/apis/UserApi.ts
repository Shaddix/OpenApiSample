/* tslint:disable */
/* eslint-disable */
/**
 * OpenApiSample
 * This is documentation of OpenApiSample
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: info@arturdr.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UserDto,
    UserDtoFromJSON,
    UserDtoToJSON,
    UserUpdateDto,
    UserUpdateDtoFromJSON,
    UserUpdateDtoToJSON,
} from '../models';

export interface UserGetRequest {
    id?: number;
}

export interface UserPatchRequest {
    userId?: number;
    userUpdateDto?: UserUpdateDto;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async userGetRaw(requestParameters: UserGetRequest): Promise<runtime.ApiResponse<UserDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/User`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async userGet(requestParameters: UserGetRequest): Promise<UserDto> {
        const response = await this.userGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userPatchRaw(requestParameters: UserPatchRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/User`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateDtoToJSON(requestParameters.userUpdateDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userPatch(requestParameters: UserPatchRequest): Promise<void> {
        await this.userPatchRaw(requestParameters);
    }

}
